import java.util.concurrent.Semaphore;

public class PingPongThreads {

	private class PingThread extends Thread {
		
		public PingThread() {
			
		}
		
		public void run() {
			for (int i = 0; i < 30; i++) {
				
				try {
					ping_sem.acquire();
				} 
				catch (InterruptedException e) {
					
				}
				
				// unlock pong and lock ping
				// release when ping prints, allow pong to run
				try {
					System.out.print("Ping");
				}
				finally {
					pong_sem.release();
				}
			}
		}
		
	}
	
private class PongThread extends Thread {
		
		public PongThread() {
			
		}
		
		public void run() {
			for (int i = 0; i < 30; i++) {
				
				try {
				pong_sem.acquire();
				
				}
				catch (InterruptedException e){
					
				}
				
				try {
				System.out.println("-Pong");
				}
				finally {
					ping_sem.release();
				}
			
			}
		}
		
	}
	

	public void run() {
		PingThread ping = new PingThread();
		PongThread pong = new PongThread();
		
		
		
		ping.start();
		pong.start();
	}

	
	/* better idea: ping needs to run first ALWAYS, no restriction needed. After
	 * ping ran, prevent it from running immediately again. Allow pong to run, give it a permit
	 * After pong runs, reverse the steps (prevent pong from running immediately again
	 * and give ping a permit), and so on... Continue this until done
	 *
	 * 
     * !! ! ! ! !!!! !!   we need TWO semaphores for that 	 !!!!  ! !!! ! ! 
	
	*/
	
	private Semaphore ping_sem = new Semaphore(1);
	private Semaphore pong_sem = new Semaphore(0);
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub

		PingPongThreads ppt = new PingPongThreads();
		ppt.run();
		
	}

}
